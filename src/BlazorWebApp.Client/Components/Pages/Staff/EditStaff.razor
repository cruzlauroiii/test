@page "/staff/edit/{id:int}"
@using Application.DTOs
@using BlazorWebApp.Client.Services
@using Domain.Interfaces
@inject ClientStaffService StaffService
@inject IRoleRepository RoleRepository
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Edit Staff</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>Edit Staff Member</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (updateStaffDto != null)
                    {
                        <EditForm Model="updateStaffDto" OnValidSubmit="HandleSubmit" FormName="UpdateStaffForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">@errorMessage</div>
                            }

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="firstName" class="form-label">First Name</label>
                                        <InputText id="firstName" class="form-control" @bind-Value="updateStaffDto.FirstName" />
                                        <ValidationMessage For="@(() => updateStaffDto.FirstName)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="lastName" class="form-label">Last Name</label>
                                        <InputText id="lastName" class="form-control" @bind-Value="updateStaffDto.LastName" />
                                        <ValidationMessage For="@(() => updateStaffDto.LastName)" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" type="email" class="form-control" @bind-Value="updateStaffDto.Email" />
                                <ValidationMessage For="@(() => updateStaffDto.Email)" />
                            </div>

                            <div class="mb-3">
                                <div class="form-check">
                                    <InputCheckbox id="isActive" class="form-check-input" @bind-Value="updateStaffDto.IsActive" />
                                    <label class="form-check-label" for="isActive">
                                        Active
                                    </label>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Roles</label>
                                <div class="row">
                                    @foreach (var role in availableRoles)
                                    {
                                        <div class="col-md-6">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" 
                                                       id="role_@role.Id" 
                                                       checked="@updateStaffDto.RoleIds.Contains(role.Id)"
                                                       @onchange="@(e => ToggleRole(role.Id, (bool)e.Value!))" />
                                                <label class="form-check-label" for="role_@role.Id">
                                                    @role.Name - @role.Description
                                                </label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Update Staff
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private UpdateStaffDto? updateStaffDto;
    private List<Domain.Entities.Role> availableRoles = new();
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStaff();
        await LoadRoles();
    }

    private async Task LoadStaff()
    {
        try
        {
            var staff = await StaffService.GetStaffByIdAsync(Id);
            if (staff != null)
            {
                updateStaffDto = new UpdateStaffDto
                {
                    Id = staff.Id,
                    Email = staff.Email,
                    FirstName = staff.FirstName,
                    LastName = staff.LastName,
                    IsActive = staff.IsActive,
                    RoleIds = new List<int>() // Will be populated when roles are loaded
                };
            }
            else
            {
                errorMessage = "Staff member not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load staff member.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadRoles()
    {
        try
        {
            var roles = await RoleRepository.GetAllAsync();
            availableRoles = roles.ToList();
            
            // Now populate role IDs from staff data
            if (updateStaffDto != null)
            {
                var staff = await StaffService.GetStaffByIdAsync(Id);
                if (staff != null)
                {
                    updateStaffDto.RoleIds = availableRoles
                        .Where(r => staff.Roles.Contains(r.Name))
                        .Select(r => r.Id)
                        .ToList();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load roles.";
        }
    }

    private void ToggleRole(int roleId, bool isChecked)
    {
        if (updateStaffDto == null) return;
        
        if (isChecked)
        {
            if (!updateStaffDto.RoleIds.Contains(roleId))
                updateStaffDto.RoleIds.Add(roleId);
        }
        else
        {
            updateStaffDto.RoleIds.Remove(roleId);
        }
    }

    private async Task HandleSubmit()
    {
        if (updateStaffDto == null) return;
        
        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            await StaffService.UpdateStaffAsync(updateStaffDto);
            Navigation.NavigateTo("/staff");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/staff");
    }
}