@page "/driver"
@using Domain.DTOs
@using Application.Interfaces
@using Application.Interfaces
@inject IRoleService RoleService
@inject IStaffService StaffService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Policy = "DriverRole")]

<PageTitle>Driver Operations</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Driver Operations</h2>
                <button class="btn btn-success" @onclick="SetDriverRoleOnly">
                    <i class="fas fa-truck"></i> Switch to Driver Only
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (driverData.Any())
            {
                <div class="card">
                    <div class="card-header">
                        <h5>Driver Configuration</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var property in driverData)
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <h6 class="card-title">@property.Key</h6>
                                            <p class="card-text">@property.Value</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <h4>No Driver Configuration Found</h4>
                    <p>Driver role properties are not configured yet.</p>
                </div>
            }

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert alert-success mt-3">
                    @message
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<KeyValuePair<string, string>> driverData = new();
    private bool isLoading = true;
    private string message = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDriverData();
    }

    private async Task LoadDriverData()
    {
        isLoading = true;
        try
        {
            var data = new List<KeyValuePair<string, string>>();
            
            // For now, use hardcoded values. In a real implementation,
            // you would create services for these entities
            data.Add(new KeyValuePair<string, string>("ipad_bShowCompleted", "true"));
            data.Add(new KeyValuePair<string, string>("WorkCompany", "Sample Company"));
            data.Add(new KeyValuePair<string, string>("TruckID", "TRUCK001"));
            data.Add(new KeyValuePair<string, string>("TrailerID", "TRAILER001"));
            data.Add(new KeyValuePair<string, string>("TrailerID2", "TRAILER002"));
            data.Add(new KeyValuePair<string, string>("TrailerID3", "TRAILER003"));
            data.Add(new KeyValuePair<string, string>("logintype", "SL_DRIVER"));

            driverData = data;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading driver data: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SetDriverRoleOnly()
    {
        try
        {
            // This would need to be implemented in StaffService to clear all roles except Driver
            message = "Switched to Driver role only. All other roles have been removed for this session.";
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = "Error switching to driver role: " + ex.Message;
            message = string.Empty;
        }
    }
}