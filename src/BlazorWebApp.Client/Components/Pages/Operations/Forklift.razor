@page "/forklift"
@using Application.DTOs
@using Application.UseCases.Roles
@using Application.UseCases.Staff
@inject RoleService RoleService
@inject StaffService StaffService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Policy = "ForkliftRole")]

<PageTitle>Forklift Operations</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Forklift Operations</h2>
                <button class="btn btn-warning" @onclick="SetForkliftRoleOnly">
                    <i class="fas fa-pallet"></i> Switch to Forklift Only
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (forkliftData.Any())
            {
                <div class="card">
                    <div class="card-header">
                        <h5>Forklift Configuration</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var property in forkliftData)
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <h6 class="card-title">@property.Key</h6>
                                            <p class="card-text">@property.Value</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <h4>No Forklift Configuration Found</h4>
                    <p>Forklift role properties are not configured yet.</p>
                </div>
            }

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert alert-success mt-3">
                    @message
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<KeyValuePair<string, string>> forkliftData = new();
    private bool isLoading = true;
    private string message = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadForkliftData();
    }

    private async Task LoadForkliftData()
    {
        isLoading = true;
        try
        {
            var data = new List<KeyValuePair<string, string>>();
            
            // Add forklift specific configuration
            data.Add(new KeyValuePair<string, string>("logintype", "SL_FORKLIFT"));

            forkliftData = data;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading forklift data: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SetForkliftRoleOnly()
    {
        try
        {
            // This would need to be implemented in StaffService to clear all roles except Forklift
            message = "Switched to Forklift role only. All other roles have been removed for this session.";
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = "Error switching to forklift role: " + ex.Message;
            message = string.Empty;
        }
    }
}