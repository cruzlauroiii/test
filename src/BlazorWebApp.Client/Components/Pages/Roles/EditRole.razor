@page "/roles/edit/{id:int}"
@using Application.DTOs
@using BlazorWebApp.Client.Services
@inject ClientRoleService RoleService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Edit Role</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header">
                    <h3>Edit Role</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (updateRoleDto != null)
                    {
                        <EditForm Model="updateRoleDto" OnValidSubmit="HandleSubmit" FormName="EditRoleForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">@errorMessage</div>
                            }

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="name" class="form-label">Role Name</label>
                                        <InputText id="name" class="form-control" @bind-Value="updateRoleDto.Name" />
                                        <ValidationMessage For="@(() => updateRoleDto.Name)" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" class="form-control" rows="3" @bind-Value="updateRoleDto.Description" />
                                <ValidationMessage For="@(() => updateRoleDto.Description)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Role Properties (Key-Value Pairs)</label>
                                
                                @foreach (var (property, index) in updateRoleDto.Properties.Select((p, i) => (p, i)))
                                {
                                    <div class="row mb-2" id="property-@index">
                                        <div class="col-md-4">
                                            <input type="text" class="form-control" placeholder="Key" 
                                                   @bind="property.Key" @bind:event="oninput" />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="text" class="form-control" placeholder="Value" 
                                                   @bind="property.Value" @bind:event="oninput" />
                                        </div>
                                        <div class="col-md-2">
                                            <button type="button" class="btn btn-outline-danger btn-sm" 
                                                    @onclick="() => RemoveProperty(index)">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                }

                                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddProperty">
                                    <i class="fas fa-plus"></i> Add Property
                                </button>
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Update Role
                                </button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            Role not found.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    
    private UpdateRoleDto? updateRoleDto;
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRole();
    }

    private async Task LoadRole()
    {
        isLoading = true;
        try
        {
            var role = await RoleService.GetRoleByIdAsync(Id);
            if (role != null)
            {
                updateRoleDto = new UpdateRoleDto
                {
                    Id = role.Id,
                    Name = role.Name,
                    Description = role.Description,
                    Properties = role.Properties.ToList()
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load role.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AddProperty()
    {
        updateRoleDto?.Properties.Add(new RolePropertyDto { RoleId = Id });
    }

    private void RemoveProperty(int index)
    {
        if (updateRoleDto?.Properties.Count > 0)
        {
            updateRoleDto.Properties.RemoveAt(index);
        }
    }

    private async Task HandleSubmit()
    {
        if (updateRoleDto == null) return;

        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            // Remove empty properties
            updateRoleDto.Properties.RemoveAll(p => string.IsNullOrWhiteSpace(p.Key) || string.IsNullOrWhiteSpace(p.Value));
            
            await RoleService.UpdateRoleAsync(updateRoleDto);
            Navigation.NavigateTo("/roles");
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to update role. Please try again.";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/roles");
    }
}