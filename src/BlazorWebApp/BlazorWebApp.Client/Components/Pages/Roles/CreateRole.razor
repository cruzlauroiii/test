@page "/roles/create"
@using Domain.DTOs
@using Application.Interfaces
@inject IRoleService RoleService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Create Role</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header">
                    <h3>Create New Role</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="createRoleDto" OnValidSubmit="HandleSubmit" FormName="CreateRoleForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="name" class="form-label">Role Name</label>
                                    <InputText id="name" class="form-control" @bind-Value="createRoleDto.Name" />
                                    <ValidationMessage For="@(() => createRoleDto.Name)" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" rows="3" @bind-Value="createRoleDto.Description" />
                            <ValidationMessage For="@(() => createRoleDto.Description)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Role Properties (Key-Value Pairs)</label>
                            
                            @foreach (var (property, index) in createRoleDto.Properties.Select((p, i) => (p, i)))
                            {
                                <div class="row mb-2" id="property-@index">
                                    <div class="col-md-4">
                                        <input type="text" class="form-control" placeholder="Key" 
                                               @bind="property.Key" @bind:event="oninput" />
                                    </div>
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" placeholder="Value" 
                                               @bind="property.Value" @bind:event="oninput" />
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                                @onclick="() => RemoveProperty(index)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            }

                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddProperty">
                                <i class="fas fa-plus"></i> Add Property
                            </button>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Create Role
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateRoleDto createRoleDto = new CreateRoleDto();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        // Start with one empty property
        AddProperty();
    }

    private void AddProperty()
    {
        createRoleDto.Properties.Add(new CreateRolePropertyDto());
    }

    private void RemoveProperty(int index)
    {
        if (createRoleDto.Properties.Count > 0)
        {
            createRoleDto.Properties.RemoveAt(index);
        }
    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // Remove empty properties
            createRoleDto.Properties.RemoveAll(p => string.IsNullOrWhiteSpace(p.Key) || string.IsNullOrWhiteSpace(p.Value));
            
            await RoleService.CreateRoleAsync(createRoleDto);
            Navigation.NavigateTo("/roles");
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to create role. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/roles");
    }
}