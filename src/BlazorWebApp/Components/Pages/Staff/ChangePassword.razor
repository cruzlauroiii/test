@page "/staff/change-password/{id:int}"
@using Application.DTOs
@using Application.UseCases.Staff
@inject StaffService StaffService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Change Password</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Change Password</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (staff != null)
                    {
                        <div class="mb-3">
                            <strong>Staff:</strong> @staff.FirstName @staff.LastName (@staff.Username)
                        </div>

                        <EditForm Model="changePasswordDto" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">@errorMessage</div>
                            }

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success">@successMessage</div>
                            }

                            <div class="mb-3">
                                <label for="currentPassword" class="form-label">Current Password</label>
                                <InputText id="currentPassword" type="password" class="form-control" @bind-Value="changePasswordDto.CurrentPassword" />
                                <ValidationMessage For="@(() => changePasswordDto.CurrentPassword)" />
                            </div>

                            <div class="mb-3">
                                <label for="newPassword" class="form-label">New Password</label>
                                <InputText id="newPassword" type="password" class="form-control" @bind-Value="changePasswordDto.NewPassword" />
                                <ValidationMessage For="@(() => changePasswordDto.NewPassword)" />
                            </div>

                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
                                @if (changePasswordDto.NewPassword != confirmPassword && !string.IsNullOrEmpty(confirmPassword))
                                {
                                    <div class="text-danger">Passwords do not match.</div>
                                }
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                                <button type="submit" class="btn btn-primary" disabled="@(isSaving || changePasswordDto.NewPassword != confirmPassword)">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Change Password
                                </button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="alert alert-danger">Staff member not found.</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private StaffDto? staff;
    private ChangePasswordDto changePasswordDto = new();
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        changePasswordDto.StaffId = Id;
        await LoadStaff();
    }

    private async Task LoadStaff()
    {
        try
        {
            staff = await StaffService.GetStaffByIdAsync(Id);
            if (staff == null)
            {
                errorMessage = "Staff member not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load staff member.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        isSaving = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var result = await StaffService.ChangePasswordAsync(changePasswordDto);
            if (result)
            {
                successMessage = "Password changed successfully!";
                changePasswordDto.CurrentPassword = string.Empty;
                changePasswordDto.NewPassword = string.Empty;
                confirmPassword = string.Empty;
                
                // Navigate back after a short delay
                await Task.Delay(1500);
                Navigation.NavigateTo("/staff");
            }
            else
            {
                errorMessage = "Failed to change password. Please check your current password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while changing the password.";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/staff");
    }
}