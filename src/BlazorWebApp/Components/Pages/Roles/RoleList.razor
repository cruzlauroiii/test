@page "/roles"
@using Application.DTOs
@using Application.UseCases.Roles
@inject RoleService RoleService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Role Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Role Management</h2>
                <div>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Add Role
                    </button>
                    <button class="btn btn-outline-secondary ms-2" @onclick="LoadRoles">
                        <i class="fas fa-refresh"></i> Refresh
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (roleList.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Properties</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in roleList)
                            {
                                <tr>
                                    <td>@role.Id</td>
                                    <td>@role.Name</td>
                                    <td>@role.Description</td>
                                    <td>
                                        <span class="badge bg-secondary">@role.Properties.Count properties</span>
                                        @if (role.Properties.Any())
                                        {
                                            <br />
                                            <small class="text-muted">
                                                @string.Join(", ", role.Properties.Take(3).Select(p => $"{p.Key}: {p.Value}"))
                                                @if (role.Properties.Count > 3)
                                                {
                                                    <text>...</text>
                                                }
                                            </small>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(role)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteRole(role.Id)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <h4>No Roles Found</h4>
                    <p>There are currently no roles in the system. Click "Add Role" to create the first role.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<RoleDto> roleList = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        isLoading = true;
        try
        {
            var roles = await RoleService.GetAllRolesAsync();
            roleList = roles.ToList();
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        Navigation.NavigateTo("/roles/create");
    }

    private void ShowEditModal(RoleDto role)
    {
        Navigation.NavigateTo($"/roles/edit/{role.Id}");
    }

    private async Task DeleteRole(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this role?"))
        {
            try
            {
                await RoleService.DeleteRoleAsync(id);
                await LoadRoles();
            }
            catch (Exception ex)
            {
                // Handle error
            }
        }
    }
}